import { BigNumberish } from "ethers";
import { ethers } from "hardhat";

// eslint-disable-next-line @typescript-eslint/no-var-requires
const { expect } = require("chai");

describe("evm-verifier", function () {
  it("Verify a ring signature", async function () {
    // link libraries
    const contractFactory = await ethers.getContractFactory("RingSigVerifier");

    // deploy SigVerifier contract
    const SigVerifier = await contractFactory.deploy();

    const message =
      12113184057566780434847363020064265563638509593857816382491985674884116197064n;

    const ring_: BigNumberish[] = [
      30558939714202291090863029727820829993227403204286654734430544819396481281155n,
      46835398937525857424678912804713110217248423408711238708095319128726301404767n,
      36527336516757141982692764653028488263347504639791543174831352430519439297986n,
      15011237199815729085619642936750715774280631056461653359383019129472793929103n,
      30103554500144535254965021336757008479704861502777924021458799636567575289359n,
      52090609727678693574435399254703833889410700116234244177206170117175907888773n,
      15164162595175125008547705889856181828932143716710538299042410382956573856362n,
      20165396248642806335661137158563863822683438728408180285542980607824890485122n,
    ];

    const responses: BigNumberish[] = [
      2163507676083829556374193918940812083906948731318369820734369045383034404699n,
      21334465242260931952772469489200429588549296071553790454795470467481073486210n,
      9738793369373201907063287587865489056078826214186464084090465300692903271857n,
      55613129569324064850690939521904254591001535690140082162349145173696732645584n,
    ];

    const c: BigNumberish =
      33439525273320178092917812293294615539453087089344012405171201878562686197180n;

    console.log("ringSize: ", ring_.length / 2);
    console.log("responses len: ", responses.length);
    console.log(
      "output: ",
      await SigVerifier.verifyRingSignature(message, ring_, responses, c),
    );
    expect(
      await SigVerifier.verifyRingSignature(message, ring_, responses, c),
    ).to.equal(true);
  });
});

// hash content 1:  [
//   12113184057566780434847363020064265563638509593857816382491985674884116197064n,
//   219204886840849908028014012625747377771820123591n
// ]
// hashed 1:  36459818419401382496461149294464231900601238052908346960070280403692755718848n
// c1:  36459818419401382496461149294464231900601238052908346960070280403692755718848n

// address2:  [ 606767724423913741019290992611359625208248198650n ]
// hash content 2:  [ 606767724423913741019290992611359625208248198650n ]
// hashed 2:  52041268882655644009487522909766098467485545374524804408106721546694115999018n
// c2:  52041268882655644009487522909766098467485545374524804408106721546694115999018n

// address3:  [ 983782698796935024351272079094855575414894367284n ]
// hash content 3:  [ 983782698796935024351272079094855575414894367284n ]
// hashed 3:  112972328470561409682595613117527753411263814135202870626390636045019808580782n
// c3:  112972328470561409682595613117527753411263814135202870626390636045019808580782n

// address0:  [ 724038509070516885475944026615474814277180373983n ]
// hash content 0:  [ 724038509070516885475944026615474814277180373983n ]
// hashed 0:  33439525273320178092917812293294615539453087089344012405171201878562686197180n
// c0:  33439525273320178092917812293294615539453087089344012405171201878562686197180n
